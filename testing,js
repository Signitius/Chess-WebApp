import { gameState } from "./oop";

for(let direction of directionsArray){
        var newLocation=[square[0]+direction[0],square[1]+direction[1]];
        while (newLocation[0]>-1 && newLocation[0]<8 && newLocation[1]>-1 && newLocation[1]<8){
    
            attackedSquares.push(newLocation);

            if (directionsArray[0]=="short-range")break;

            let occupied=false;
            for (let array of Object.values(position)){
                for (let code of array){
                    if (code[0]==newLocation[0] && code[1]== newLocation[1]){
                        occupied=true;
                        break;
                    }
                }
                    
            }
            if (occupied==true){
                break;
            }
            
            newLocation=[square[0]+direction[0],square[1]+direction[1]];
        }
        
    }


function contains(position,square){
    for (let array of Object.values(position)){
        for (let code of array){
            if (code[0]==newLocation[0] && code[1]== newLocation[1]){
                return true;
            }
        }
                
    }
    return false;
}

function nextSquare(location,range,direction){
    var newLocation=[location[0]+direction[0],location[1]+direction[1]];
    attackedSquares.push(newLocation);
    if(newLocation[0]<0 || newLocation[0]>7 || newLocation[1]<0 || newLocation[1]>7) return;
    if (range=="short-range") return;
    if (contains(position,location)) return;
    nextSquare(newLocation,range,direction);
}
for (let array of Object.values(position)){
    for (let code of array){
        if (code[0]==square[0] && code[1]== square[1]){

            piece=getkey(position,array);
            
            
            break;
        }
    }
    
}
if(contains(position,square)) piece=getkey(position,square);
let attackedSquares;
for (let direction of directionsArray){
    nextSquare(square,directionsArray[0],direction)
}
return attackedSquares;